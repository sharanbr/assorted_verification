Polymorphism is an interesting and powerful concept within OOPS.
Many advanced and powerful verification components can be built, or rather need, polymorphism.
Understanding of polymorphism will help verificaiton engineers to build complex, highly scalable testbenches/testbench components.

The collection is code examples that demonstrate how polymorphism behaves under different code constructs.

In all the examples, the basic code remains the same.
This is how the code looks like in general.

There is a base class which contains func1 and func2.
There is a derived class which also contains func2 and func2.
Every time, func1 is called, it internally calls func2.

Now, a variable of type base class is created.
An object of derived class is created.
This base class variable points to derived class object.
Using the base class variable, func1 is called.

The excel summarizes all the cases and the outcome in a table.
